<!DOCTYPE html>
<html>

<head>
    <style>
        * {
            box-sizing: border-box
        }

        body {
            font-family: "Lato", sans-serif;
        }
        /* Style the tab */

        div.tab {
            float: left;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
            width: 30%;
            height: 300px;
        }
        /* Style the buttons inside the tab */

        div.tab button {
            display: block;
            background-color: inherit;
            color: black;
            padding: 22px 16px;
            width: 100%;
            border: none;
            outline: none;
            text-align: left;
            cursor: pointer;
            transition: 0.3s;
            font-size: 17px;
        }
        /* Change background color of buttons on hover */

        div.tab button:hover {
            background-color: #ddd;
        }
        /* Create an active/current "tab button" class */

        div.tab button.active {
            background-color: #ccc;
        }
        /* Style the tab content */

        .tabcontent {
            float: left;
            padding: 0px 12px;
            border: 1px solid #ccc;
            width: 70%;
            border-left: none;
        }
    </style>
</head>

<body>

    <p><b><center>Solution for problem 1-4 of activity 2</center></b></p>

    <div class="tab">
        <button class="tablinks" onclick="openCity(event, 'problem1')" id="defaultOpen">Solution for Problem 1</button>
        <button class="tablinks" onclick="openCity(event, 'problem2')">Solution for Problem 2</button>
        <button class="tablinks" onclick="openCity(event, 'problem3')">Solution for Problem 3</button>
        <button class="tablinks" onclick="openCity(event, 'problem4')">Solution for Problem 4</button>
        <button class="tablinks" onclick="openCity(event, 'problem5')">Result for Game!!</button>
    </div>

    <div id="problem1" class="tabcontent">
        <h3>Solution for Problem 1 </h3>
        <p>Make function</p>
        <img src="/image/1.jpg">
    </div>

    <div id="problem2" class="tabcontent">
        <h3>Solution for Problem 2 </h3>
        <p>Change to “blue”</p>
        <img src="/image/2.jpg">
        <p>Change to “yellow”</p>
        <img src="/image/3.jpg">
    </div>

    <div id="problem3" class="tabcontent">
        <h3>Solution for Problem 3 </h3>
        <img src="/image/4.jpg">
        <img src="/image/5.jpg">
        <img src="/image/6.jpg">
        <img src="/image/7.jpg">
        <img src="/image/8.jpg">
    </div>

    <div id="problem4" class="tabcontent">
        <h3>Solution for Problem 4 </h3>
        <img src="/image/10.jpg">
        <img src="/image/9.jpg">
    </div>

    <div id="problem5" class="tabcontent">

        <body style="position: relative; min-height: 100%; top: 0px;">

            <div id="myfilter" style="position: absolute; background-color: rgb(0, 0, 0); opacity: 0.3; width: 322px; height: 182px; display: block;"></div>

            <div id="myrestartbutton" style="position: absolute; padding-top: 75px; padding-left: 120px; display: block;"><button onclick="restartGame()">Restart</button></div>

            <div id="canvascontainer"><canvas width="320" height="180"></canvas></div>

            <div style="text-align:center;width:320px;">
                <button ontouchstart="moveup()" onmousedown="moveup()" onmouseup="clearmove()">UP</button><br><br>
                <button ontouchstart="moveleft()" onmousedown="moveleft()" onmouseup="clearmove()">LEFT</button>
                <button ontouchstart="moveright()" onmousedown="moveright()" onmouseup="clearmove()">RIGHT</button><br><br>
                <button ontouchstart="movedown()" onmousedown="movedown()" onmouseup="clearmove()">DOWN</button>
            </div>
            <div><button id="mystopbutton" onclick="stopGame()">PAUSE</button></div>
            <div id="mylife">
            </div>




            <script>
                var myGameArea;
                var myGamePiece;
                var myObstacles = [];
                var myscore;
                var countStop = false;
                var mylife = 3;


                function restartGame() {
                    document.getElementById("myfilter").style.display = "none";
                    document.getElementById("myrestartbutton").style.display = "none";
                    myGameArea.stop();
                    myGameArea.clear();
                    mylife = 3;
                    countStop = false;
                    myGameArea = {};
                    myGamePiece = {};
                    myObstacles = [];
                    myscore = {};
                    document.getElementById("canvascontainer").innerHTML = "";
                    startGame()

                }

                function stopGame() {
                    if (!countStop) {
                        myGameArea.norun();
                        countStop = true;
                    } else if (countStop) {
                        myGameArea.run();
                        countStop = false;
                    }
                }

                function startIn() {
                    myGameArea = new gamearea();
                    myGamePiece = new component(30, 30, "red", 10, 75);
                    myscore = new component("15px", "Consolas", "black", 220, 25, "text");
                    myGameArea.stop;
                }

                function startGame() {
                    myGameArea = new gamearea();
                    myGamePiece = new component(30, 30, "blue", 10, 75);
                    myscore = new component("15px", "Consolas", "black", 220, 25, "text");
                    myGameArea.start();
                }

                function gamearea() {
                    this.canvas = document.createElement("canvas");
                    this.canvas.width = 320;
                    this.canvas.height = 180;
                    document.getElementById("canvascontainer").appendChild(this.canvas);
                    this.context = this.canvas.getContext("2d");
                    this.pause = false;
                    this.frameNo = 0;
                    this.start = function() {
                        this.interval = setInterval(updateGameArea, 20);
                    }
                    this.stop = function() {
                        clearInterval(this.interval);
                        this.pause = true;
                    }
                    this.norun = function() {
                        this.pause = true;
                    }
                    this.run = function() {
                        this.pause = false;
                    }
                    this.clear = function() {
                        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    }
                }

                function component(width, height, color, x, y, type) {

                    this.type = type;
                    if (type == "text") {
                        this.text = color;
                    }
                    this.score = 0;
                    this.width = width;
                    this.height = height;
                    this.speedX = 0;
                    this.speedY = 0;
                    this.x = x;
                    this.y = y;
                    this.update = function() {
                        ctx = myGameArea.context;
                        if (this.type == "text") {
                            ctx.font = this.width + " " + this.height;
                            ctx.fillStyle = color;
                            ctx.fillText(this.text, this.x, this.y);
                        } else {
                            ctx.fillStyle = color;
                            ctx.fillRect(this.x, this.y, this.width, this.height);
                        }
                    }
                    this.crashWith = function(otherobj) {
                        var myleft = this.x;
                        var myright = this.x + (this.width);
                        var mytop = this.y;
                        var mybottom = this.y + (this.height);
                        var otherleft = otherobj.x;
                        var otherright = otherobj.x + (otherobj.width);
                        var othertop = otherobj.y;
                        var otherbottom = otherobj.y + (otherobj.height);
                        var crash = true;
                        if ((mybottom < othertop) || (mytop > otherbottom) || (myright < otherleft) || (myleft > otherright)) {
                            crash = false;
                        }
                        return crash;
                    }
                }

                function updateGameArea() {
                    var x, y, min, max, height, gap;

                    document.getElementById("mylife").innerHTML = mylife;

                    for (i = 0; i < myObstacles.length; i += 1) {
                        if (myGamePiece.crashWith(myObstacles[i]) && mylife > 0) {
                            mylife--;
                            myGameArea.stop();
                            myGameArea.clear();
                            myGameArea = {};
                            myGamePiece = {};
                            myObstacles = [];
                            document.getElementById("canvascontainer").innerHTML = "";
                            myGameArea = new gamearea();
                            myGamePiece = new component(30, 30, "blue", 10, 75);
                            myGameArea.start();

                            return;
                        }
                        if (myGamePiece.crashWith(myObstacles[i]) && mylife == 0) {
                            myGameArea.stop();
                            document.getElementById("myfilter").style.display = "block";
                            document.getElementById("myrestartbutton").style.display = "block";
                            return;
                        }
                    }
                    if (myGameArea.pause == false) {
                        myGameArea.clear();
                        myGameArea.frameNo += 1;
                        myscore.score += 1;
                        if (myGameArea.frameNo == 1 || everyinterval(150)) {
                            x = myGameArea.canvas.width;
                            y = myGameArea.canvas.height - 100;
                            min = 20;
                            max = 100;
                            height = Math.floor(Math.random() * (max - min + 1) + min);
                            min = 50;
                            max = 100;
                            gap = Math.floor(Math.random() * (max - min + 1) + min);
                            myObstacles.push(new component(10, height, "yellow", x, 0));
                            myObstacles.push(new component(10, x - height - gap, "yellow", x, height + gap));
                        }
                        for (i = 0; i < myObstacles.length; i += 1) {
                            myObstacles[i].x += -1;
                            myObstacles[i].update();
                        }
                        myscore.text = "SCORE: " + myscore.score;
                        myscore.update();
                        myGamePiece.x += myGamePiece.speedX;
                        myGamePiece.y += myGamePiece.speedY;
                        myGamePiece.update();
                    }
                }

                function everyinterval(n) {
                    if ((myGameArea.frameNo / n) % 1 == 0) {
                        return true;
                    }
                    return false;
                }

                function moveup(e) {
                    myGamePiece.speedY = -1;
                }

                function movedown() {
                    myGamePiece.speedY = 1;
                }

                function moveleft() {
                    myGamePiece.speedX = -1;
                }

                function moveright() {
                    myGamePiece.speedX = 1;
                }

                function clearmove(e) {
                    myGamePiece.speedX = 0;
                    myGamePiece.speedY = 0;
                }
                startIn();
            </script>
        </body>
    </div>


    <script>
        function openCity(evt, cityName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(cityName).style.display = "block";
            evt.currentTarget.className += " active";
        }

        // Get the element with id="defaultOpen" and click on it
        document.getElementById("defaultOpen").click();
    </script>

</body>

</html>
